@page "/category-list"
@page "/category-list/{UriPageNumber:int}"

@layout InnerPageLayout

<div class="container-fluid p-0 mb-5">
    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="PageName">
        Category List
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
<!-- Category List Start-->
    @if (CategoryService.AllCategories is not null)
{
    <div class="product-view">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-8">
                    <div class="row">
                        @if (CategoryLists is null && CategoryLists!.Count == 0) return;
                        @foreach (var category in CategoryLists)
                        {
                            var linkPageSlugUrl = $"/category-list/{category.Slug}/{category.Id}"; // Use category.Slug instead of CategorySlug
                            <div class="col-md-4">
                                <div class="product-item">
                                    <div class="product-title">
                                        <div class="@category.CategoryItemCSS">
                                            @if (!string.IsNullOrEmpty(category.ImageURL))
                                            {
                                                <img src="@category.ImageURL" alt="@category.Name">
                                            }
                                            else if (category.ImageURL!.Count() > 0)
                                            {
                                                <img src="@category.ImageURL" alt="@category.Name">
                                            }
                                            <a href="@linkPageSlugUrl" @onclick:preventDefault @onclick="()=>CategoryClicked(category.Id)"
                                                class="category-name @(category.Id == CategoryId? "active" : "")">
                                                <p>@category.Name</p>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <!-- Side Bar Start -->
                <SideBarProductPage />
                <!-- Side Bar End -->
            </div>
            <!-- Pagination Start -->
            <div class="col-md-12">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@(currentPage == 1 ? "#" : "/category-list/" + (currentPage - 1))" @onclick:preventDefault @onclick="(() => PreviousPage())">Previous</a>
                        </li>
                        @for (var i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="/category-list/@i" @onclick:preventDefault @onclick="(() => GoToPage(i))">@i</a>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="@(currentPage == totalPages ? "#" : "/category-list/" + (currentPage + 1))" @onclick:preventDefault @onclick="(() => NextPage())">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
            <!-- Pagination End -->
        </div>
    </div>
}
else
{
    <div class="col-md-12">
        <div class="alert alert-warning" role="alert">
            <DisplaySpinner />
        </div>
    </div>
}
<!-- Category List End-->
</div>
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>

@code {
    [Parameter]
    public int? UriPageNumber { get; set; }

    public int currentPage { get; set; } = 1;
    public int totalPages { get; set; } = 0;
    public int PageSize { get; set; } = 6;

    public int CategoryId { get; set; } = 0;
    [Parameter] public EventCallback DefaultCategoryClickedEvent { get; set; }
    [Parameter] public EventCallback<int> CategoryClickedEvent { get; set; }

    List<Category>? CategoryLists = new();
    protected async override Task OnInitializedAsync()
    {
        await LoadCategoies();
        CategoryService.CategoryAction += StateHasChanged;
        messageDialogService.Action += StateHasChanged;
    }

    private async Task LoadCategoies()
    {
        if (UriPageNumber.HasValue)
        {
            currentPage = UriPageNumber.Value;
        }

        await CategoryService.GetAllCategories();
        var allCategories = CategoryService.AllCategories;
        if (allCategories is not null)
        {
            await InvokeAsync(async () =>
            {
                totalPages = (int)Math.Ceiling(allCategories.Count() / (double)PageSize);
                CategoryLists = allCategories.Skip((currentPage - 1) * PageSize).Take(PageSize).ToList();
                StateHasChanged();
            });
            return;
        }

        totalPages = 0;
        CategoryLists = new List<Category>();
        return;
    }
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCategoies();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadCategoies();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadCategoies();
        NavigationManager.NavigateTo($"/category-list/{currentPage}", forceLoad: false);
    }

    private async Task CategoryClicked(int categoryId)
    {
        CategoryId = categoryId;
        await CategoryClickedEvent.InvokeAsync(categoryId);
    }

    async void DefaultCategoryClicked()
    {
        CategoryId = 0;
        await DefaultCategoryClickedEvent.InvokeAsync();
    }

    void ViewProduct(Product product)
    {
        NavigationManager.NavigateTo($"/category-list/{currentPage}");
    }

    private void DisplayResponse(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("Success", serviceResponse.Message);
        else
            messageDialogService.messageDialog!.SetDialogValues("Warning", serviceResponse.Message);

        messageDialogService.SetMessageDialog();

    }

    public void Dispose()
    {
        CategoryService.CategoryAction -= StateHasChanged;
    }
}
