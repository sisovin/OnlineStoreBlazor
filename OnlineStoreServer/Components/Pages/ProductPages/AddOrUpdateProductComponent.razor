@page "/add-product"
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6 offset-lg-3">
            <EditForm Model="MyProduct" method="post" OnValidSubmit="HandlesSaveProduct" FormName="MyProduct">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="Shadow card" style="border: 1px solid #656565">
                    <div class="card-header">
                         <h3><strong>Add Product</strong></h3>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="MyProduct.Name" class="form-control"></InputText>
                            <ValidationMessage For="@(() => MyProduct.Name)" />
                        </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Price</label>
                             <InputNumber @bind-Value="MyProduct.Price" class="form-control"></InputNumber>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Quantity</label>
                             <InputNumber @bind-Value="MyProduct.Quantity" class="form-control"></InputNumber>
                             <ValidationMessage For="@(() => MyProduct.Quantity)" />
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Description</label>
                             <InputTextArea @bind-Value="MyProduct.Description" class="form-control"></InputTextArea>
                             <ValidationMessage For="@(() => MyProduct.Description)" />
                         </div>                         
                         <div class="form-group mt-3">
                             <label class="form-label @(ImageUploadMessage == ""?"" : "text-danger")">
                                @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                             </label>
                             <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                             <ValidationMessage For="@(() => MyProduct.Base64Img)" />
                         </div>
                    </div>
                    <div class="card-footer">
                        <div class="form-group mt-3">
                            @if(ShowSaveButton)
                            {
                                <button type="submit" class="btn btn-outline-primary"><i class="fa fa-plus"></i>Save Product</button>
                            }
                        </div>
                        <BusyButtonComponent ShowBusyButton="ShowBusyButton"></BusyButtonComponent>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<MessageDialog @ref="messageDialog"></MessageDialog>

@code {
    Product MyProduct = new();
    string ImageUploadMessage = "";

    async Task HandlesSaveProduct()
    {
        ShowSaveButton = false;
        ShowBusyButton = !ShowSaveButton;
        if (string.IsNullOrEmpty(MyProduct.Base64Img))
        {
            messageDialog!.SetDialogValues("Warning","You need to choose image");
            SetMessageDialog();
            return;
        }

        var (flg, message) = await ClientServices.AddProduct(MyProduct);
        if (flg)
            messageDialog!.SetDialogValues("Success", message);
        else
            messageDialog!.SetDialogValues("danger", message);

        SetMessageDialog();
        return;
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {

        if (e.File.Name.ToLower().EndsWith(".jpg") || e.File.Name.ToLower().EndsWith(".png"))
        {
            try
            {
                var format = e.File.ContentType; // Get the actual image format from the file
                var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);

                var buffer = new byte[resizedImage.Size];
                await resizedImage.OpenReadStream().ReadAsync(buffer);
                var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                ImageUploadMessage = "";
                MyProduct.Base64Img = imageData;
                imageData = "";
                ImageUploadMessage = "Image uploaded successfully!";
            }
            catch (Exception ex)
            {
                ImageUploadMessage = "Error uploading image: " + ex.Message;
            }
        }
        else
        {
            ImageUploadMessage = "Please upload a valid image (.jpg or .png)";
            return;
        }
    }

    MessageDialog? messageDialog;
    public bool ShowBusyButton { get; set; }
    public bool ShowSaveButton { get; set; } = true;

    private async void SetMessageDialog()
    {
        await messageDialog!.ShowMessage();
        ShowBusyButton = false;
        ShowSaveButton = !ShowBusyButton;
        StateHasChanged();
    }
}