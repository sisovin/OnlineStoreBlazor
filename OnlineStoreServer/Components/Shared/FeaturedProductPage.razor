@page "/featured-product"

@implements IDisposable

<!-- Featured Product Start -->
    <div class="featured-product product">
        <div class="container-fluid">
            <!--Loop of FeaturedProductList-->
            <div class="section-header">
                <h1>Featured Product</h1>
            </div>
        @if (ProductService.FeaturedProducts is not null)
        {
            <div class="row align-items-center product-slider product-slider-4" autoplay="true">
                <!--Product Item Start-->
                @for (int i = 0; i < ProductService.FeaturedProducts.Count(); i += 4)
                {
                    @foreach (Product product in ProductService.FeaturedProducts.Skip(i).Take(4))
                    {
                        <div class="col-lg-3">
                            <div class="product-item">
                                <div class="product-title">
                                    <a href="/product-list/@product.Id">@product.Name</a>
                                    <div class="ratting">
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                        <i class="fa fa-star"></i>
                                    </div>
                                </div>
                                <div class="product-image">
                                    <a href="/product-list/@product.Id">
                                        @if (!string.IsNullOrEmpty(product.Base64Img))
                                        {
                                            <img src="@product.Base64Img" alt="@product.Name">
                                        }
                                        else if (product.Base64Img!.Count() > 0)
                                        {
                                            <img src="@product.Base64Img" alt="@product.Name">
                                        }
                                    </a>
                                    <div class="product-action">
                                        <a href="#"><i class="fa fa-cart-plus"></i></a>
                                        <a href="#"><i class="fa fa-heart"></i></a>
                                        <a href="#"><i class="fa fa-search"></i></a>
                                    </div>
                                </div>
                                <div class="product-price">
                                    <h3><span>$</span>@product.Price</h3>
                                    <a class="btn" href="/cart/@product.Id"><i class="fa fa-shopping-cart"></i>Buy Now</a>
                                </div>
                            </div>

                        </div>
                    }
                }
                <!--Product Item End-->
            </div>
            <!--Edned Loop of FeaturedProductList-->
        }
        else
        {
            <div class="alert alert-info">No Featured Products available.</div>
        }
        </div>
    </div>
<!-- Featured Product End -->
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>



@code {
    List<Product>? FeaturedProductList = new();
    protected override async Task OnInitializedAsync()
    {
        bool featured = true;
        await ClientServices.GetAllProducts(featured);
        ClientServices.ProductAction += StateHasChanged;
        messageDialogService.Action += StateHasChanged;
    }

    private async Task RetrieveFeaturedProducts()
    {
        FeaturedProductList?.Clear();
        bool featured = true;
        await ClientServices.GetAllProducts(featured);
        FeaturedProductList = ClientServices.FeaturedProducts;
    }

    string GetNewLabel(DateTime dataUpload)
    {
        int maxDays = 30;
        int productDateAfterUploaded = (DateTime.Now - dataUpload).Days;
        return productDateAfterUploaded <= maxDays ? "New" : null!;
    }

    void ViewProduct(Product product)
    {
        NavigationManager.NavigateTo($"/product-list/{product.Id}");
    }

    private void DisplayResponse(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("Success", serviceResponse.Message);
        else
            messageDialogService.messageDialog!.SetDialogValues("Warning", serviceResponse.Message);

        messageDialogService.SetMessageDialog();

    }

    public void Dispose()
    {
        ClientServices.ProductAction -= StateHasChanged;
        messageDialogService.Action -= StateHasChanged;
    }
        
}
